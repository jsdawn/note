import{_ as s,o as n,c as a,d as l}from"./app.d22f3309.js";const d=JSON.parse('{"title":"Docker + GitHub Actions 持续集成工作流","description":"","frontmatter":{"title":"Docker + GitHub Actions 持续集成工作流"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"手动构建镜像并推送到阿里云","slug":"手动构建镜像并推送到阿里云","link":"#手动构建镜像并推送到阿里云","children":[]},{"level":2,"title":"使用 GitHub Actions 代替","slug":"使用-github-actions-代替","link":"#使用-github-actions-代替","children":[{"level":3,"title":"1、创建Actions文件","slug":"_1、创建actions文件","link":"#_1、创建actions文件","children":[]},{"level":3,"title":"2、选择工作流模板","slug":"_2、选择工作流模板","link":"#_2、选择工作流模板","children":[]}]},{"level":2,"title":"查看工作流日志","slug":"查看工作流日志","link":"#查看工作流日志","children":[]},{"level":2,"title":"部署到服务器","slug":"部署到服务器","link":"#部署到服务器","children":[]},{"level":2,"title":"致谢","slug":"致谢","link":"#致谢","children":[]}],"relativePath":"guide/docker-github.md","lastUpdated":1658894796000}'),p={name:"guide/docker-github.md"},e=l(`<h1 id="docker-github-actions-持续集成工作流" tabindex="-1">Docker + GitHub Actions 持续集成工作流 <a class="header-anchor" href="#docker-github-actions-持续集成工作流" aria-hidden="true">#</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p>本文讲解如何使用 <code>GitHub Actions</code> 配合 <code>Docker</code> 进行开发部署过程中的持续集成工作流。</p><p>这里默认您已编写好项目的 <code>Dockerfile</code> 文件，Dockerfile 的写法可通过我前面的文章进行学习：<a href="https://juejin.cn/post/6977256058725072932" target="_blank" rel="noreferrer">Docker 快速部署 Node express 项目</a></p><p>至于为什么使用 GitHub Actions，这里引用官方：</p><blockquote><p>在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。</p></blockquote><h2 id="手动构建镜像并推送到阿里云" tabindex="-1">手动构建镜像并推送到阿里云 <a class="header-anchor" href="#手动构建镜像并推送到阿里云" aria-hidden="true">#</a></h2><p>我们目前的工作流是 <code>更新代码 + 构建镜像 + 提交镜像 + 服务器pull镜像 + 启动容器</code>。 GitHub Actions 并不推荐操作服务器内容，所以这里我们也分为两部分工作，前一部分为 <code>更新代码 + 构建镜像 + 提交镜像</code>。这里先看看 手动构建镜像并推送到阿里云 是怎样操作的：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 登录阿里云 Docker Registry</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">login</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--username=</span><span style="color:#89DDFF;">****</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry.cn-shenzhen.aliyuncs.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 根据项目的 Dockerfile 文件构建镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry.cn-shenzhen.aliyuncs.com/xxxx/image-name:v1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将镜像推送到Registry</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry.cn-shenzhen.aliyuncs.com/xxxx/image-name:v1</span></span>
<span class="line"></span></code></pre></div><h2 id="使用-github-actions-代替" tabindex="-1">使用 GitHub Actions 代替 <a class="header-anchor" href="#使用-github-actions-代替" aria-hidden="true">#</a></h2><p>以上步骤虽然也不复杂，不过当提交和推送代码到git仓库后需要手动操作。</p><p>使用 GitHub Actions 只需要第一次设置，就可以在每次推送代码到git仓库的时候 自动构建和推送最新镜像。</p><h3 id="_1、创建actions文件" tabindex="-1">1、创建Actions文件 <a class="header-anchor" href="#_1、创建actions文件" aria-hidden="true">#</a></h3><p>当然，GitHub Actions 基于 git 仓库。 在自己项目的 git 仓库中，选择 Actions 菜单点击 <code>set up a workflow yourself -&gt;</code> 自动创建 yml 文件。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e409057e2ffc4aec84ae1b8b84257059~tplv-k3u1fbpfcp-watermark.image" alt="7701626086152_.pic.jpg"></p><p>也可以在IDE中 项目根目录下 手动创建 <code>.github/workflows</code> 目录，新建 name.yml 文件（name随意名字，可以工作流功能取名）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c226ba8797db4e688293771dfaef323c~tplv-k3u1fbpfcp-watermark.image" alt="WeChat529ef8045faf5b1b1bfcbf3e9b1f0305.png"></p><h3 id="_2、选择工作流模板" tabindex="-1">2、选择工作流模板 <a class="header-anchor" href="#_2、选择工作流模板" aria-hidden="true">#</a></h3><p>与 Docker 有关，在 git marketplace 中 查找 docker actions，找到了一项非常符合我们的工作流模板 <code>Build and push Docker images</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf8791a04c25474194c3ecdd8a40c341~tplv-k3u1fbpfcp-watermark.image" alt="7711626086271_.pic_hd.jpg"></p><p>进入模板详情复制代码到 name.yml 文件中，并加以修改。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 工作流程的名称</span></span>
<span class="line"><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Docker Image CI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 触发条件：当branch触发push（push，merge Pull Request），且 tag 为 image.xxx 时触发工作流。</span></span>
<span class="line"><span style="color:#FF9CAC;">on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">tags</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image.*</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 工作流程，可包含多个作业</span></span>
<span class="line"><span style="color:#F07178;">jobs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 作业1名称</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># 指定的运行器环境</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">runs-on</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu-latest</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># 作业包含一系列任务，称为 steps</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">steps</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 检出当前代码（触发工作流时的commits）</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Checkout</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">actions/checkout@v2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># setup-qemu 如果您想使用 QEMU 添加仿真支持以便能够针对更多平台进行构建，则 action 会很有用</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Set up QEMU</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker/setup-qemu-action@v1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># setup-buildxaction 将默认使用docker-container 构建器驱动程序创建和引导构建器。非必需</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Set up Docker Buildx</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker/setup-buildx-action@v1</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 登录到阿里云容器镜像服务</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Login to Ali Docker</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker/login-action@v1</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;"># 配置登录信息，secrets 变量在 github settings -&gt; secrets 中设置</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">registry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">\${{ secrets.ALI_DOCKER_HUB_REGISTRY }}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">username</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">\${{ secrets.ALI_DOCKER_HUB_USN }}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">password</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">\${{ secrets.ALI_DOCKER_HUB_PWD }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 构建镜像并上传到阿里云容器镜像仓库 (自行百度创建自己的镜像仓库)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Build and push</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker_build</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">uses</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker/build-push-action@v2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">with</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">push</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">tags</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry.cn-shenzhen.aliyuncs.com/xxxx/image-name:v1</span></span>
<span class="line"></span></code></pre></div><h2 id="查看工作流日志" tabindex="-1">查看工作流日志 <a class="header-anchor" href="#查看工作流日志" aria-hidden="true">#</a></h2><p>工作流触发后，可在 GitHub Actions 中查看日志。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee8ef30ad40b47ec8eba53a8bdfd8600~tplv-k3u1fbpfcp-watermark.image" alt="7731626088531_.pic.jpg"></p><p>绿色√标记说明已完成并且成功。</p><h2 id="部署到服务器" tabindex="-1">部署到服务器 <a class="header-anchor" href="#部署到服务器" aria-hidden="true">#</a></h2><p>进入服务器终端，启动 Docker 容器</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 停止并移除正在运行的容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-name</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker-name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 拉取最新的镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry.cn-shenzhen.aliyuncs.com/xxxx/image-name:v1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动容器 （这里以node项目为例，不同镜像启动方式不同，参照各自使用的基础镜像文档）</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name=docker-name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registry.cn-shenzhen.aliyuncs.com/xxxx/image-name:v1</span></span>
<span class="line"></span></code></pre></div><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-hidden="true">#</a></h2><p>GitHub Actions 文档：<a href="https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noreferrer">https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions</a></p><p>Benny技术博客干货满满：www.benny.wiki</p><blockquote><p><strong>转载声明</strong>： 请注明作者，注明原文链接，有疑问致邮 <a href="mailto:kingwyh1993@163.com" target="_blank" rel="noreferrer">kingwyh1993@163.com</a></p></blockquote>`,33),o=[e];function t(c,r,i,y,C,D){return n(),a("div",null,o)}const h=s(p,[["render",t]]);export{d as __pageData,h as default};
